version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: parkealo-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-parkealo_dev}
      POSTGRES_USER: ${POSTGRES_USER:-parkealo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-parkealo_password}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    networks:
      - parkealo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-parkealo_user} -d ${POSTGRES_DB:-parkealo_dev}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: parkealo-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - parkealo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: parkealo-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-parkealo_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-parkealo_password}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST:-parkealo_vhost}
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - parkealo-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # API Gateway Service
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: parkealo-api-gateway
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${API_GATEWAY_PORT:-3000}
      DATABASE_URL: postgresql://${POSTGRES_USER:-parkealo_user}:${POSTGRES_PASSWORD:-parkealo_password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-parkealo_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:${REDIS_PORT:-6379}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-parkealo_user}:${RABBITMQ_PASSWORD:-parkealo_password}@rabbitmq:${RABBITMQ_PORT:-5672}/${RABBITMQ_VHOST:-parkealo_vhost}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-15m}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-7d}
    ports:
      - "${API_GATEWAY_PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/api-gateway:/app
      - /app/node_modules
    networks:
      - parkealo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # User Service
  user-service:
    build:
      context: ./services/user-service
      dockerfile: Dockerfile
    container_name: parkealo-user-service
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      PORT: ${USER_SERVICE_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-parkealo_user}:${POSTGRES_PASSWORD:-parkealo_password}@postgres:${POSTGRES_PORT:-5432}/${POSTGRES_DB:-parkealo_dev}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:${REDIS_PORT:-6379}
      RABBITMQ_URL: amqp://${RABBITMQ_USER:-parkealo_user}:${RABBITMQ_PASSWORD:-parkealo_password}@rabbitmq:${RABBITMQ_PORT:-5672}/${RABBITMQ_VHOST:-parkealo_vhost}
    ports:
      - "${USER_SERVICE_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./services/user-service:/app
      - /app/node_modules
    networks:
      - parkealo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend React Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: parkealo-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      REACT_APP_API_URL: http://localhost:${API_GATEWAY_PORT:-3000}
      REACT_APP_ENVIRONMENT: ${NODE_ENV:-development}
    ports:
      - "${FRONTEND_PORT:-3002}:3000"
    depends_on:
      - api-gateway
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - parkealo-network

  # Nginx Reverse Proxy (Optional - for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: parkealo-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-8080}:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - frontend
      - api-gateway
    networks:
      - parkealo-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local

networks:
  parkealo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
